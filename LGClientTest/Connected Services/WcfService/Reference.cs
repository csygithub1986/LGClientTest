//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace LGClientTest.WcfService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameConfig", Namespace="http://schemas.datacontract.org/2004/07/LeagueGoServer.Model")]
    [System.SerializableAttribute()]
    public partial class GameConfig : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LGClientTest.WcfService.Player[] PlayersField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LGClientTest.WcfService.Player[] Players {
            get {
                return this.PlayersField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayersField, value) != true)) {
                    this.PlayersField = value;
                    this.RaisePropertyChanged("Players");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/LeagueGoServer.Model")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LGClientTest.WcfService.PlayerType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LGClientTest.WcfService.PlayerType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerType", Namespace="http://schemas.datacontract.org/2004/07/LeagueGoServer.Model")]
    public enum PlayerType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AI = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        RealBoard = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Host = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Internet = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WcfService.IWcfService", CallbackContract=typeof(LGClientTest.WcfService.IWcfServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IWcfService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/ClientHeartbeat", ReplyAction="http://tempuri.org/IWcfService/ClientHeartbeatResponse")]
        int ClientHeartbeat();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/ClientHeartbeat", ReplyAction="http://tempuri.org/IWcfService/ClientHeartbeatResponse")]
        System.Threading.Tasks.Task<int> ClientHeartbeatAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/ClientGetAllAccount", ReplyAction="http://tempuri.org/IWcfService/ClientGetAllAccountResponse")]
        LGClientTest.WcfService.GameConfig[] ClientGetAllAccount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/ClientGetAllAccount", ReplyAction="http://tempuri.org/IWcfService/ClientGetAllAccountResponse")]
        System.Threading.Tasks.Task<LGClientTest.WcfService.GameConfig[]> ClientGetAllAccountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/ClientLogin", ReplyAction="http://tempuri.org/IWcfService/ClientLoginResponse")]
        int ClientLogin(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/ClientLogin", ReplyAction="http://tempuri.org/IWcfService/ClientLoginResponse")]
        System.Threading.Tasks.Task<int> ClientLoginAsync(string userName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWcfServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWcfService/ClientOffline")]
        void ClientOffline(string Msg);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWcfServiceChannel : LGClientTest.WcfService.IWcfService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WcfServiceClient : System.ServiceModel.DuplexClientBase<LGClientTest.WcfService.IWcfService>, LGClientTest.WcfService.IWcfService {
        
        public WcfServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public WcfServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public WcfServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WcfServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WcfServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int ClientHeartbeat() {
            return base.Channel.ClientHeartbeat();
        }
        
        public System.Threading.Tasks.Task<int> ClientHeartbeatAsync() {
            return base.Channel.ClientHeartbeatAsync();
        }
        
        public LGClientTest.WcfService.GameConfig[] ClientGetAllAccount() {
            return base.Channel.ClientGetAllAccount();
        }
        
        public System.Threading.Tasks.Task<LGClientTest.WcfService.GameConfig[]> ClientGetAllAccountAsync() {
            return base.Channel.ClientGetAllAccountAsync();
        }
        
        public int ClientLogin(string userName) {
            return base.Channel.ClientLogin(userName);
        }
        
        public System.Threading.Tasks.Task<int> ClientLoginAsync(string userName) {
            return base.Channel.ClientLoginAsync(userName);
        }
    }
}
